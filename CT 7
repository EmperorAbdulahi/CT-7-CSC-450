#include <iostream>
#include <pthread.h>
#include <unistd.h>

using namespace std;

pthread_mutex_t myMutex = PTHREAD_MUTEX_INITIALIZER; // Rename mutex to myMutex
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

int count_finished = 0;

void* count_up(void* arg) {
    for (int i = 1; i <= 20; ++i) {
        cout << "Thread 1: Counting up - " << i << endl;
        sleep(1);
    }
    pthread_mutex_lock(&myMutex); // Use myMutex
    count_finished = 1;
    pthread_cond_signal(&cond);
    pthread_mutex_unlock(&myMutex); // Use myMutex
    pthread_exit(NULL);
}

void* count_down(void* arg) {
    pthread_mutex_lock(&myMutex); // Use myMutex
    while (!count_finished) {
        pthread_cond_wait(&cond, &myMutex); // Use myMutex
    }
    pthread_mutex_unlock(&myMutex); // Use myMutex
    for (int i = 20; i >= 0; --i) {
        cout << "Thread 2: Counting down - " << i << endl;
        sleep(1);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;

    if (pthread_create(&thread1, NULL, count_up, NULL) != 0) {
        cerr << "Error creating thread 1" << endl;
        return 1;
    }
    if (pthread_create(&thread2, NULL, count_down, NULL) != 0) {
        cerr << "Error creating thread 2" << endl;
        return 1;
    }

    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    return 0;
}

