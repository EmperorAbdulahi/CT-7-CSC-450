#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

int count_finished = 0;

void *count_up(void *arg) {
    for (int i = 1; i <= 20; ++i) {
        printf("Thread 1: Counting up - %d\n", i);
        sleep(1);
    }
    pthread_mutex_lock(&mutex);
    count_finished = 1;
    pthread_cond_signal(&cond);
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}

void *count_down(void *arg) {
    pthread_mutex_lock(&mutex);
    while (!count_finished) {
        pthread_cond_wait(&cond, &mutex);
    }
    pthread_mutex_unlock(&mutex);
    for (int i = 20; i >= 0; --i) {
        printf("Thread 2: Counting down - %d\n", i);
        sleep(1);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;
    if (pthread_create(&thread1, NULL, count_up, NULL) != 0) {
        fprintf(stderr, "Error creating thread 1\n");
        return 1;
    }
    if (pthread_create(&thread2, NULL, count_down, NULL) != 0) {
        fprintf(stderr, "Error creating thread 2\n");
        return 1;
    }
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);
    return 0;
}
